{"ast":null,"code":"import _objectSpread from \"/home/bea/Documents/bea/smart-money-pocket/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/bea/Documents/bea/smart-money-pocket/src/components/dashboard.js\";\nimport React, { Component } from \"react\";\nimport DateRange from \"./dateRangePicker\";\nimport Note from \"./note\";\nimport moment from \"moment\"; // import axios from \"axios\";\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super();\n\n    this.getDateDiff = (dateDiff, startDate, endDate) => {\n      this.setState({\n        dateDiff: dateDiff,\n        startDate: startDate,\n        endDate: endDate\n      });\n      var tempData = [];\n      this.finalTable = [];\n      console.log(\"diff\", this.state.dateDiff);\n      console.log(\"start\", this.state.startDate);\n      console.log(\"end\", this.state.endDate);\n\n      if (endDate !== undefined) {\n        for (let i = 0; i < this.state.dateDiff; i++) {\n          tempData.push({\n            date: moment(this.state.startDate).format(\"DD.MM.YYYY\"),\n            entry: null,\n            note: null,\n            attachments: null\n          });\n          console.log(\"diff\", this.state.dateDiff);\n          console.log(\"a1\", [...tempData]);\n          this.setState({\n            tData: [...tempData]\n          });\n          console.log(\"a2\", this.state.tData); //for loop the real-time clicked data\n\n          if (startDate !== null) {\n            startDate.setDate(startDate.getDate() + 1);\n          } else {\n            let today = new Date();\n            return today;\n          }\n        }\n      } else {\n        tempData.push({\n          date: moment(this.state.startDate).format(\"DD.MM.YYYY\"),\n          entry: null,\n          note: null,\n          attachments: null\n        });\n        console.log(\"a1\", [...tempData]);\n        this.setState({\n          tData: [...tempData]\n        });\n        console.log(\"a2\", this.state.tData);\n      }\n\n      this.attendance = [];\n      let match;\n      let cloneData = [...this.state.tData]; //to map the function\n\n      let realDates = this.state.tData.map((realDate, i) => {\n        match = this.state.user.attendance.filter(val => {\n          return val.date === realDate.date;\n        });\n        console.log(\"realClick\", realDate.date);\n\n        if (match.length > 0) {\n          cloneData[i] = _objectSpread({}, match[0]);\n          this.setState({\n            tData: [...cloneData]\n          });\n          console.log(\"final dummy data\", [...this.state.tData]);\n        } // let selectEntryTimeResult;\n        // if (this.state.user.role == \"trainer\") {\n        //   selectEntryTimeResult = (\n        //     <EntryTimeSelect\n        //       onSave={this.HandleEnterTimeReset}\n        //       onChange={this.HandleEnterTimeReset}\n        //       entry={this.state.tData[i].entry}\n        //       value={realDate.date} //to match the rel click to the cliked date\n        //     />\n        //   );\n        // } else if (this.state.user.role == \"manager\") {\n        //   selectEntryTimeResult = (\n        //     <EntryTimeSelect\n        //       onSave={this.HandleEnterTimeReset}\n        //       onChange={this.HandleEnterTimeReset}\n        //       entry={this.state.tData[i].entry}\n        //       value={realDate.date} //to match the rel click to the cliked date\n        //     />\n        //   );\n        // } else {\n        //   selectEntryTimeResult = this.state.tData[i].entry;\n        // }\n\n\n        let noteResult;\n        noteResult = React.createElement(Note, {\n          onClick: this.HandleNote,\n          onClose: this.HandleNote,\n          onChange: this.HandleNote,\n          note: this.state.tData[i].note,\n          onCancel: this.HandleNote,\n          value: realDate.date //from getDateDiff event\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346\n          },\n          __self: this\n        }); // let uploadResult;\n        // if (this.state.user.role == \"attendee\") {\n        //   uploadResult = (\n        //     <Upload\n        //       onClick={this.HandleAttachment}\n        //       onChange={this.HandleAttachment}\n        //       attachments={this.state.tData[i].attachments}\n        //       value={realDate.date}\n        //     />\n        //   );\n        // } else if (this.state.user.role == \"trainer\") {\n        //   uploadResult = (\n        //     <Upload\n        //       onClick={this.HandleAttachment}\n        //       onChange={this.HandleAttachment}\n        //       attachments={this.state.tData[i].attachments}\n        //       value={realDate.date}\n        //     />\n        //   );\n        // } else if (this.state.user.role == \"manager\") {\n        //   uploadResult = (\n        //     <Upload\n        //       onClick={this.HandleAttachment}\n        //       onChange={this.HandleAttachment}\n        //       attachments={this.state.tData[i].attachments}\n        //       value={realDate.date}\n        //     />\n        //   );\n        // } else {\n        //   uploadResult = this.state.tData[i].attachments;\n        // }\n\n        this.finalTable.push(React.createElement(\"figcaption\", {\n          style: {\n            width: \"25vw\",\n            height: \"20vh\",\n            border: \"1px solid grey\",\n            margin: \"1%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 397\n          },\n          __self: this\n        }, this.state.tData[i].date), React.createElement(\"div\", {\n          style: {\n            width: \"20\",\n            height: \"50%\",\n            margin: \"1%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398\n          },\n          __self: this\n        }, noteResult))); // startDate.setDate(startDate.getDate() + 1);\n\n        this.setState({\n          catchDate: true\n        });\n        console.log(\"realDate\", realDate.date);\n      });\n    };\n\n    this.studentTable = [];\n\n    let _today = new Date(),\n        date = _today.getFullYear() + \"-\" + (_today.getMonth() + 1) + \"-\" + _today.getDate();\n\n    this.state = {\n      user: {\n        //trainer self\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        className: [\"Fbw1\", \"Fbw2\"],\n        schoolName: \"DCI\",\n        role: \"trainer\",\n        attendance: [{\n          date: \"01.12.2019\",\n          entry: \"10:39 am\",\n          exit: \"04:45 pm\",\n          timeDiff: \"08:00 am\",\n          status: \"Late\",\n          note: \"late train\",\n          trainerNote: null,\n          attachments: []\n        }, {\n          date: \"02.12.2019\",\n          entry: \"12:00 am\",\n          exit: \"17:00 am\",\n          timeDiff: \"07:00 am\",\n          status: \"Late\",\n          note: null,\n          trainerNote: \"please offer me a prove, thanks \",\n          attachments: []\n        }, {\n          date: \"03.12.2019\",\n          entry: \"11:00 am\",\n          exit: \"13:00 am\",\n          timeDiff: \"05:00 am\",\n          status: \"Late\",\n          note: \"Bus was late. Plase find enclosed attachments\",\n          trainerNote: null,\n          attachments: \"03.12.2019_1.jpg\",\n          alert: null\n        }, {\n          date: \"04.12.2019\",\n          entry: null,\n          exit: null,\n          timeDiff: \"02:00 am\",\n          status: \"Late\",\n          note: null,\n          trainerNote: \"ok\",\n          attachments: []\n        }, {\n          date: \"05.12.2019\",\n          entry: \"08:00 am\",\n          exit: \"16:00 am\",\n          timeDiff: \"08:00 am\",\n          status: \"On Time\",\n          note: null,\n          trainerNote: null,\n          attachments: []\n        }, {\n          date: \"06.12.2019\",\n          entry: \"08:00 am\",\n          exit: \"16:00 am\",\n          timeDiff: \"08:00 am\",\n          status: \"On Time\",\n          note: null,\n          trainerNote: null,\n          attachments: []\n        }, {\n          date: \"07.12.2019\",\n          entry: \"08:00 am\",\n          exit: \"16:00 am\",\n          timeDiff: \"08:00 am\",\n          status: \"On Time\",\n          note: null,\n          trainerNote: null,\n          attachments: []\n        }, {\n          date: \"08.12.2019\",\n          entry: \"08:30 am\",\n          exit: \"16:00 am\",\n          timeDiff: \"04:00 am\",\n          status: \"On Time\",\n          note: \"Bus was late. Plase find enclosed attachments\",\n          trainerNote: null,\n          attachments: \"08.12.2019_1.jpg\"\n        }, {\n          date: \"09.12.2019\",\n          entry: \"08:30 am\",\n          exit: \"16:00 am\",\n          timeDiff: \"08:00 am\",\n          status: \"On Time\",\n          note: null,\n          trainerNote: null,\n          attachments: []\n        }, {\n          date: \"10.12.2019\",\n          entry: \"08:00 am\",\n          exit: \"16:00 am\",\n          timeDiff: \"08:00 am\",\n          status: \"On Time\",\n          note: null,\n          trainerNote: null,\n          attachments: []\n        }]\n      },\n      tData: [],\n      selectedStudent: \"\",\n      studentList: [],\n      selectStudentTable: [],\n      date: date,\n      entry: \"\",\n      exit: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      dateDiff: \"\",\n      note: \"\",\n      trainerNote: \"\",\n      attachments: \"\",\n      status: \"\",\n      hours1: \"\",\n      min1: \"\",\n      hours2: \"\",\n      min2: \"\",\n      sec1: \"\",\n      sec2: \"\",\n      timeDiff: \"\",\n      catchDate: false\n    };\n    this.getDateDiff = this.getDateDiff.bind(this); //     this.HandleEnterTimeReset = this.HandleEnterTimeReset.bind(this);\n\n    this.HandleNote = this.HandleNote.bind(this); //     this.HandleAttachment = this.HandleAttachment.bind(this);\n  } //   componentDidMount() {\n  //     axios({\n  //       method: \"get\",\n  //       url: \"https://attrc.herokuapp.com/api/dashboard/\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         \"x-auth-token\": localStorage.getItem(\"jwtToken\")\n  //       }\n  //     }).then(res => {\n  //       const user = res.data.result.user;\n  //       console.log(user);\n  //       this.setState({ user: user });\n  //       console.log(this.state.user);\n  //     });\n  //   }\n  //   HandleEnterTimeReset(val, date) {\n  //     //selected entrytime\n  //     let entry = val;\n  //     console.log(\"entry time\", entry);\n  //     //selected date\n  //     let entryDate = date;\n  //     console.log(\"entry time date\", entryDate);\n  //     let matchArr = [];\n  //     let entryDates = this.state.tData.map(entryDate => {\n  //       var entryDate = date;\n  //       console.log(entryDate);\n  //       matchArr = this.state.user.attendance.filter(val => {\n  //         return val.date === entryDate;\n  //       });\n  //       if (matchArr.length > 0) {\n  //         matchArr[0].entry = entry;\n  //         this.setState({ attendance: [...matchArr] });\n  //       }\n  //       console.log(\"Entry reset matchArr\", matchArr);\n  //       console.log(\"this.state.user.entry\", this.state.tData);\n  //     });\n  //     this.setState({\n  //       entry: entry //to reset the entrytime to the state and send it to the trainer entry time\n  //     });\n  //   }\n\n\n  HandleNote(val, date) {\n    var note = val;\n    console.log(\"note val\", note); //pass the selected date from textedit from child component\n\n    var attDate = date;\n    console.log(\"note val selected date\", attDate);\n    let matchArr = [];\n    let attDates = this.state.tData.map(attDate => {\n      var attDate = date;\n      console.log(attDate);\n      matchArr = this.state.user.attendance.filter(val => {\n        return val.date === attDate;\n      });\n      console.log(\"matchArr note update\", matchArr);\n\n      if (matchArr.length > 0) {\n        matchArr[0].note = note;\n        this.setState({\n          attendance: [...matchArr],\n          note: note\n        });\n      }\n    });\n  } // HandleAttachment(val, date) {\n  //   let attachments = val;\n  //   console.log(\"attachment value\", attachments);\n  //   var fileDate = date;\n  //   console.log(\"attachment date\", fileDate);\n  //   let matchArr;\n  //   let fileDates = this.state.tData.map((fileDate, i) => {\n  //     matchArr = this.state.user.attendance.filter((val, i) => {\n  //       return val.date === fileDate;\n  //     });\n  //     console.log(\"attachment final matchArr\", matchArr);\n  //     if (matchArr.length > 0) {\n  //       matchArr[0].attachments = attachments;\n  //       this.setState({\n  //         attendance: [...matchArr],\n  //         attachments: attachments\n  //       });\n  //     }\n  //   });\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"Select your Data here\"), React.createElement(DateRange, {\n      onClose: this.getDateDiff,\n      dateDiff: this.state.dateDiff,\n      startDate: this.state.startDate,\n      endDate: this.state.endDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }), React.createElement(\"figure\", {\n      style: {\n        width: \"100vw\",\n        height: \"100vh\",\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, this.finalTable));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/bea/Documents/bea/smart-money-pocket/src/components/dashboard.js"],"names":["React","Component","DateRange","Note","moment","Dashboard","constructor","getDateDiff","dateDiff","startDate","endDate","setState","tempData","finalTable","console","log","state","undefined","i","push","date","format","entry","note","attachments","tData","setDate","getDate","today","Date","attendance","match","cloneData","realDates","map","realDate","user","filter","val","length","noteResult","HandleNote","width","height","border","margin","catchDate","studentTable","getFullYear","getMonth","firstname","lastname","email","className","schoolName","role","exit","timeDiff","status","trainerNote","alert","selectedStudent","studentList","selectStudentTable","hours1","min1","hours2","min2","sec1","sec2","bind","attDate","matchArr","attDates","render","display","flexWrap"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport DateRange from \"./dateRangePicker\";\nimport Note from \"./note\";\nimport moment from \"moment\";\n\n// import axios from \"axios\";\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super();\n    this.studentTable = [];\n    let today = new Date(),\n      date =\n        today.getFullYear() +\n        \"-\" +\n        (today.getMonth() + 1) +\n        \"-\" +\n        today.getDate();\n\n    this.state = {\n      user: {\n        //trainer self\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        className: [\"Fbw1\", \"Fbw2\"],\n        schoolName: \"DCI\",\n        role: \"trainer\",\n        attendance: [\n          {\n            date: \"01.12.2019\",\n            entry: \"10:39 am\",\n            exit: \"04:45 pm\",\n            timeDiff: \"08:00 am\",\n            status: \"Late\",\n            note: \"late train\",\n            trainerNote: null,\n            attachments: []\n          },\n          {\n            date: \"02.12.2019\",\n            entry: \"12:00 am\",\n            exit: \"17:00 am\",\n            timeDiff: \"07:00 am\",\n            status: \"Late\",\n            note: null,\n            trainerNote: \"please offer me a prove, thanks \",\n            attachments: []\n          },\n          {\n            date: \"03.12.2019\",\n            entry: \"11:00 am\",\n            exit: \"13:00 am\",\n            timeDiff: \"05:00 am\",\n            status: \"Late\",\n            note: \"Bus was late. Plase find enclosed attachments\",\n            trainerNote: null,\n            attachments: \"03.12.2019_1.jpg\",\n            alert: null\n          },\n          {\n            date: \"04.12.2019\",\n            entry: null,\n            exit: null,\n            timeDiff: \"02:00 am\",\n            status: \"Late\",\n            note: null,\n            trainerNote: \"ok\",\n            attachments: []\n          },\n          {\n            date: \"05.12.2019\",\n            entry: \"08:00 am\",\n            exit: \"16:00 am\",\n            timeDiff: \"08:00 am\",\n            status: \"On Time\",\n            note: null,\n            trainerNote: null,\n            attachments: []\n          },\n          {\n            date: \"06.12.2019\",\n            entry: \"08:00 am\",\n            exit: \"16:00 am\",\n            timeDiff: \"08:00 am\",\n            status: \"On Time\",\n            note: null,\n            trainerNote: null,\n            attachments: []\n          },\n          {\n            date: \"07.12.2019\",\n            entry: \"08:00 am\",\n            exit: \"16:00 am\",\n            timeDiff: \"08:00 am\",\n            status: \"On Time\",\n            note: null,\n            trainerNote: null,\n            attachments: []\n          },\n          {\n            date: \"08.12.2019\",\n            entry: \"08:30 am\",\n            exit: \"16:00 am\",\n            timeDiff: \"04:00 am\",\n            status: \"On Time\",\n            note: \"Bus was late. Plase find enclosed attachments\",\n            trainerNote: null,\n            attachments: \"08.12.2019_1.jpg\"\n          },\n          {\n            date: \"09.12.2019\",\n            entry: \"08:30 am\",\n            exit: \"16:00 am\",\n            timeDiff: \"08:00 am\",\n            status: \"On Time\",\n            note: null,\n            trainerNote: null,\n            attachments: []\n          },\n          {\n            date: \"10.12.2019\",\n            entry: \"08:00 am\",\n            exit: \"16:00 am\",\n            timeDiff: \"08:00 am\",\n            status: \"On Time\",\n            note: null,\n            trainerNote: null,\n            attachments: []\n          }\n        ]\n      },\n      tData: [],\n      selectedStudent: \"\",\n      studentList: [],\n      selectStudentTable: [],\n      date: date,\n      entry: \"\",\n      exit: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      dateDiff: \"\",\n      note: \"\",\n      trainerNote: \"\",\n      attachments: \"\",\n      status: \"\",\n      hours1: \"\",\n      min1: \"\",\n      hours2: \"\",\n      min2: \"\",\n      sec1: \"\",\n      sec2: \"\",\n      timeDiff: \"\",\n      catchDate: false\n    };\n\n    this.getDateDiff = this.getDateDiff.bind(this);\n    //     this.HandleEnterTimeReset = this.HandleEnterTimeReset.bind(this);\n    this.HandleNote = this.HandleNote.bind(this);\n    //     this.HandleAttachment = this.HandleAttachment.bind(this);\n  }\n\n  //   componentDidMount() {\n  //     axios({\n  //       method: \"get\",\n  //       url: \"https://attrc.herokuapp.com/api/dashboard/\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //         \"x-auth-token\": localStorage.getItem(\"jwtToken\")\n  //       }\n  //     }).then(res => {\n  //       const user = res.data.result.user;\n  //       console.log(user);\n  //       this.setState({ user: user });\n  //       console.log(this.state.user);\n  //     });\n  //   }\n\n  //   HandleEnterTimeReset(val, date) {\n  //     //selected entrytime\n  //     let entry = val;\n  //     console.log(\"entry time\", entry);\n\n  //     //selected date\n  //     let entryDate = date;\n  //     console.log(\"entry time date\", entryDate);\n\n  //     let matchArr = [];\n  //     let entryDates = this.state.tData.map(entryDate => {\n  //       var entryDate = date;\n  //       console.log(entryDate);\n  //       matchArr = this.state.user.attendance.filter(val => {\n  //         return val.date === entryDate;\n  //       });\n  //       if (matchArr.length > 0) {\n  //         matchArr[0].entry = entry;\n  //         this.setState({ attendance: [...matchArr] });\n  //       }\n  //       console.log(\"Entry reset matchArr\", matchArr);\n  //       console.log(\"this.state.user.entry\", this.state.tData);\n  //     });\n\n  //     this.setState({\n  //       entry: entry //to reset the entrytime to the state and send it to the trainer entry time\n  //     });\n  //   }\n\n  HandleNote(val, date) {\n    var note = val;\n    console.log(\"note val\", note);\n\n    //pass the selected date from textedit from child component\n    var attDate = date;\n    console.log(\"note val selected date\", attDate);\n\n    let matchArr = [];\n    let attDates = this.state.tData.map(attDate => {\n      var attDate = date;\n      console.log(attDate);\n      matchArr = this.state.user.attendance.filter(val => {\n        return val.date === attDate;\n      });\n      console.log(\"matchArr note update\", matchArr);\n      if (matchArr.length > 0) {\n        matchArr[0].note = note;\n        this.setState({ attendance: [...matchArr], note: note });\n      }\n    });\n  }\n\n  // HandleAttachment(val, date) {\n  //   let attachments = val;\n  //   console.log(\"attachment value\", attachments);\n\n  //   var fileDate = date;\n  //   console.log(\"attachment date\", fileDate);\n\n  //   let matchArr;\n  //   let fileDates = this.state.tData.map((fileDate, i) => {\n  //     matchArr = this.state.user.attendance.filter((val, i) => {\n  //       return val.date === fileDate;\n  //     });\n  //     console.log(\"attachment final matchArr\", matchArr);\n\n  //     if (matchArr.length > 0) {\n  //       matchArr[0].attachments = attachments;\n\n  //       this.setState({\n  //         attendance: [...matchArr],\n  //         attachments: attachments\n  //       });\n  //     }\n  //   });\n  // }\n\n  getDateDiff = (dateDiff, startDate, endDate) => {\n    this.setState({\n      dateDiff: dateDiff,\n      startDate: startDate,\n      endDate: endDate\n    });\n    var tempData = [];\n\n    this.finalTable = [];\n    console.log(\"diff\", this.state.dateDiff);\n    console.log(\"start\", this.state.startDate);\n    console.log(\"end\", this.state.endDate);\n\n    if (endDate !== undefined) {\n      for (let i = 0; i < this.state.dateDiff; i++) {\n        tempData.push({\n          date: moment(this.state.startDate).format(\"DD.MM.YYYY\"),\n          entry: null,\n          note: null,\n          attachments: null\n        });\n        console.log(\"diff\", this.state.dateDiff);\n        console.log(\"a1\", [...tempData]);\n        this.setState({\n          tData: [...tempData]\n        });\n        console.log(\"a2\", this.state.tData);\n        //for loop the real-time clicked data\n        if (startDate !== null) {\n          startDate.setDate(startDate.getDate() + 1);\n        } else {\n          let today = new Date();\n          return today;\n        }\n      }\n    } else {\n      tempData.push({\n        date: moment(this.state.startDate).format(\"DD.MM.YYYY\"),\n        entry: null,\n        note: null,\n        attachments: null\n      });\n      console.log(\"a1\", [...tempData]);\n      this.setState({\n        tData: [...tempData]\n      });\n      console.log(\"a2\", this.state.tData);\n    }\n\n    this.attendance = [];\n    let match;\n    let cloneData = [...this.state.tData];\n    //to map the function\n    let realDates = this.state.tData.map((realDate, i) => {\n      match = this.state.user.attendance.filter(val => {\n        return val.date === realDate.date;\n      });\n      console.log(\"realClick\", realDate.date);\n\n      if (match.length > 0) {\n        cloneData[i] = { ...match[0] };\n        this.setState({ tData: [...cloneData] });\n        console.log(\"final dummy data\", [...this.state.tData]);\n      }\n\n      // let selectEntryTimeResult;\n      // if (this.state.user.role == \"trainer\") {\n      //   selectEntryTimeResult = (\n      //     <EntryTimeSelect\n      //       onSave={this.HandleEnterTimeReset}\n      //       onChange={this.HandleEnterTimeReset}\n      //       entry={this.state.tData[i].entry}\n      //       value={realDate.date} //to match the rel click to the cliked date\n      //     />\n      //   );\n      // } else if (this.state.user.role == \"manager\") {\n      //   selectEntryTimeResult = (\n      //     <EntryTimeSelect\n      //       onSave={this.HandleEnterTimeReset}\n      //       onChange={this.HandleEnterTimeReset}\n      //       entry={this.state.tData[i].entry}\n      //       value={realDate.date} //to match the rel click to the cliked date\n      //     />\n      //   );\n      // } else {\n      //   selectEntryTimeResult = this.state.tData[i].entry;\n      // }\n\n      let noteResult;\n      noteResult = (\n        <Note\n          onClick={this.HandleNote}\n          onClose={this.HandleNote}\n          onChange={this.HandleNote}\n          note={this.state.tData[i].note}\n          onCancel={this.HandleNote}\n          value={realDate.date} //from getDateDiff event\n        />\n      );\n\n      // let uploadResult;\n      // if (this.state.user.role == \"attendee\") {\n      //   uploadResult = (\n      //     <Upload\n      //       onClick={this.HandleAttachment}\n      //       onChange={this.HandleAttachment}\n      //       attachments={this.state.tData[i].attachments}\n      //       value={realDate.date}\n      //     />\n      //   );\n      // } else if (this.state.user.role == \"trainer\") {\n      //   uploadResult = (\n      //     <Upload\n      //       onClick={this.HandleAttachment}\n      //       onChange={this.HandleAttachment}\n      //       attachments={this.state.tData[i].attachments}\n      //       value={realDate.date}\n      //     />\n      //   );\n      // } else if (this.state.user.role == \"manager\") {\n      //   uploadResult = (\n      //     <Upload\n      //       onClick={this.HandleAttachment}\n      //       onChange={this.HandleAttachment}\n      //       attachments={this.state.tData[i].attachments}\n      //       value={realDate.date}\n      //     />\n      //   );\n      // } else {\n      //   uploadResult = this.state.tData[i].attachments;\n      // }\n\n      this.finalTable.push(\n        <figcaption\n          style={{\n            width: \"25vw\",\n            height: \"20vh\",\n            border: \"1px solid grey\",\n            margin: \"1%\"\n          }}\n        >\n          <div>{this.state.tData[i].date}</div>\n          <div\n            style={{\n              width: \"20\",\n              height: \"50%\",\n              margin: \"1%\"\n            }}\n          >\n            {noteResult}\n          </div>\n          {/* <tr key={i} align=\"center\">\n          <td style={{ width: \"20\", border: \"1px solid grey\" }}>\n            {this.state.tData[i].date}\n          </td>\n          <td style={{ width: \"20\", border: \"1px solid grey\" }}>\n            {noteResult}\n          </td>\n\n         <td>{selectEntryTimeResult}</td>\n          <td>{noteResult}</td>\n          <td>{uploadResult}</td> \n        </tr> */}\n        </figcaption>\n      );\n\n      // startDate.setDate(startDate.getDate() + 1);\n      this.setState({\n        catchDate: true\n      });\n      console.log(\"realDate\", realDate.date);\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"dashboard\">\n        <h4>Select your Data here</h4>\n        <DateRange\n          onClose={this.getDateDiff}\n          dateDiff={this.state.dateDiff}\n          startDate={this.state.startDate}\n          endDate={this.state.endDate}\n        />\n\n        {/* <table\n          style={{\n            marginLeft: \"20%\",\n            textAlign: \"center\",\n            width: \"50%\"\n          }}\n        > \n\n          {this.finalTable}\n\n         </table> */}\n\n        <figure\n          style={{\n            width: \"100vw\",\n            height: \"100vh\",\n            display: \"flex\",\n            flexWrap: \"wrap\"\n          }}\n        >\n          {this.finalTable}\n        </figure>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}